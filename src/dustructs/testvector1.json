{
  "slots": {
    "0": {
      "name": "bauxite",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "screen",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "coal",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "hematite",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "quartz",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "switch",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "switch.deactivate()\nscreen.clear()",
      "filter": {
        "args": [],
        "signature": "stop()",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "unit.setTimer(\"Live\",1)\nswitch.activate()\n",
      "filter": {
        "args": [],
        "signature": "start()",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "function round(number,decimals)\n    local power = 10^decimals\n    return math.floor((number/1000) * power) / power\nend \n\nfunction oreStatus(percent)\n    if percent <= 25 then return \"<th style=\\\"color: red;\\\">LOW</th>\"\n    elseif percent > 25 and percent < 50 then return \"<th style=\\\"color: orange;\\\">LOW</th>\"\n    else return \"<th style=\\\"color: green;\\\">GOOD</th>\"\n    end \nend\n\nlocal useL = 1 --export: Use 1 for L or 0 for t\nif useL == 1 then\n    unitMeasure = \"KL\"\nelseif useL == 0 then\n    unitMeasure = \"T\"\nend\n\n-- Bauxite Variables \nlocal maxBauxite = 10400 --export: This is the maximum mass allowed in container. Update as needed\nlocal weightBauxite = 1.28 --export:\nif useL == 1 then\n    massBauxite = round(math.ceil(bauxite.getItemsMass()/weightBauxite),1)\nelseif useL == 0 then  \n    massBauxite = round(math.ceil(bauxite.getItemsMass()),1)\nend\nlocal percentBauxite = math.ceil(((math.ceil((bauxite.getItemsMass()/weightBauxite) - 0.5)/maxBauxite)*100))\nlocal statusBauxite = oreStatus(percentBauxite)\n    \n-- Coal Variables\nlocal maxCoal = 10400 --export: This is the maximum mass allowed in container. Update as needed\nlocal weightCoal = 1.35 --export:\nif useL == 1 then\n\tmassCoal = round(math.ceil(coal.getItemsMass()/weightCoal),1)\nelseif useL == 0 then\n   \tmassCoal = round(math.ceil(coal.getItemsMass()),1)\nend\nlocal percentCoal = math.ceil(((math.ceil((coal.getItemsMass()/weightCoal) - 0.5)/maxCoal)*100))\nlocal statusCoal = oreStatus(percentCoal)\n\n-- Hematite Variables\nlocal maxHematite = 10400 --export:;This is the maximum mass allowed in container. Update as needed\nlocal weightHematite = 5.04 --export:\nif useL == 1 then\n    massHematite = round(math.ceil(hematite.getItemsMass()/weightHematite),1)\nelseif useL == 0 then\n    massHematite = round(math.ceil(hematite.getItemsMass()),1)\nend\nlocal percentHematite = math.ceil(((math.ceil((hematite.getItemsMass()/weightHematite) - 0.5)/maxHematite)*100))\nlocal statusHematite = oreStatus(percentHematite)\n\n-- Quartz Variables\nlocal maxQuartz = 10400 --export:;This is the maximum mass allowed in container. Update as needed\nlocal weightQuartz = 2.65 --export:\nif useL == 1 then\n    massQuartz = round(math.ceil(quartz.getItemsMass()/weightQuartz),1)\nelseif useL == 0 then\n    massQuartz = round(math.ceil(quartz.getItemsMass()),1)\nend\n\nlocal percentQuartz = math.ceil(((math.ceil((quartz.getItemsMass()/weightQuartz) - 0.5)/maxQuartz)*100))\nlocal statusQuartz = oreStatus(percentQuartz)\n\n\nhtml = [[\n<div class=\"bootstrap\">\n<h1 style=\"\n\tfont-size: 8em;\n\">T1 Ore Status</h1>\n<table \nstyle=\"\n\tmargin-top: 10px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\twidth: 80%;\n\tfont-size: 4em;\n\">\n\t</br>\n\t<tr style=\"\n\t\twidth: 100%;\n\t\tmargin-bottom: 30px;\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\">\n\t\t<th>Ore</th>\n\t\t<th>Qty</th>\n\t\t<th>Levels</th>\n\t\t<th>Status</th>\n\t<tr>\n\t\t<th>Bauxite</th>\n\t\t<th>]]..massBauxite..unitMeasure..[[</th>\n\t\t<th>]]..percentBauxite..[[%</th>\n\t\t]]..statusBauxite..[[\n\t</tr>\n\t<tr>\n\t\t<th>Coal</th>\n\t\t<th>]]..massCoal..unitMeasure..[[</th>\n\t\t<th>]]..percentCoal..[[%</th>\n\t\t]]..statusCoal..[[\n\t</tr>\n\t<tr>\n\t\t<th>Hematite</th>\n\t\t<th>]]..massHematite..unitMeasure..[[</th>\n\t\t<th>]]..percentHematite..[[%</th>\n\t\t]]..statusHematite..[[\n\t</tr>\n\t<tr>\n\t\t<th>Quartz</th>\n\t\t<th>]]..massQuartz..unitMeasure..[[</th>\n\t\t<th>]]..percentQuartz..[[%</th>\n\t\t]]..statusQuartz..[[\n\t</tr>\n\n</table>\n</div>\n]]\n\nscreen.setHTML(html)",
      "filter": {
        "args": [
          {
            "value": "Live"
          }
        ],
        "signature": "tick(timerId)",
        "slotKey": "-1"
      },
      "key": "2"
    }
  ],
  "methods": [],
  "events": []
}
